const logger = require('../logs/apiLogger');
const { fetchMarketData } = require('./MarketOverviewEvent');
const fetch = require('node-fetch');

let pollerInterval = null;
let activeEvents = new Set();
let notificationCallback = null;

// üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function setNotificationCallback(callback) {
  notificationCallback = callback;
}

// üõ† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Poller
function setActiveEvents(events) {
  if (!events || events.length === 0) {
    logger.warn("‚ö† –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ Poller.");
    return;
  }
  activeEvents = new Set(events);
  restartPoller();
}

// üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Polling
async function pollMarketOverview() {
  if (activeEvents.size === 0) {
    logger.info("‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å.");
    return;
  }

  try {
    const eventsData = await fetchMarketData([...activeEvents]);

    for (const event of eventsData) {
      if (!activeEvents.has(event.key)) continue;

      let imageBuffer = null;
      if (event.image) {
        try {
          const res = await fetch(event.image);
          if (res.ok) {
            const arrayBuf = await res.arrayBuffer();
            imageBuffer = Buffer.from(arrayBuf);
          } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${event.key}: ${res.status}`);
          }
        } catch (imgErr) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${event.key}: ${imgErr.message}`);
        }
      }

      if (notificationCallback) {
        await notificationCallback(event.text, imageBuffer);
      } else {
        logger.warn("‚ö† –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
      }
    }
  } catch (err) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ Poller: ${err.message}`);
  }
}

// üõ† –ó–∞–ø—É—Å–∫ Poller
function startPoller(intervalMs, events) {
  if (!events || events.length === 0) {
    logger.warn("‚ö† –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Poller –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!");
    return;
  }

  setActiveEvents(events);
  if (pollerInterval) clearInterval(pollerInterval);
  pollerInterval = s
