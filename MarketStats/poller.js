// MarketStats/poller.js
const { getMarketOverviewData } = require('./MarketOverviewEvent');
const logger = require('../logs/apiLogger');
require('dotenv').config({ path: __dirname + '/../config/.env' });

// –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è Market Overview
let marketOverviewActive = false;
// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–ª–µ—Ä–∞
let pollerInterval = null;
// Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–¥–∞–Ω–Ω—ã–π –∏–∑–≤–Ω–µ, –∏–∑ –±–æ—Ç–∞)
let notificationCallback = null;

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è Market Overview.
 */
function setMarketOverviewActive(active) {
  marketOverviewActive = active;
  logger.info(`Market Overview active: ${active}`);
}

/**
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 */
function setNotificationCallback(callback) {
  notificationCallback = callback;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–ª–∏–Ω–≥–∞.
 * –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–∑–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ notificationCallback.
 */
async function pollMarketOverview() {
  if (!marketOverviewActive) {
    logger.info("Market Overview is not active. Skipping poll cycle.");
    return;
  }
  try {
    const overviewData = await getMarketOverviewData();
    let output = "üìä **Market Overview Update**\n\n";
    for (const key in overviewData) {
      if (overviewData.hasOwnProperty(key)) {
        const event = overviewData[key];
        output += `‚Ä¢ **${event.name}:** ${event.value}\n`;
        output += `Chart: ${event.chartUrl}\n\n`;
      }
    }
    if (notificationCallback) {
      await notificationCallback(output);
    } else {
      logger.warn("Notification callback not set.");
    }
  } catch (err) {
    logger.error("Error in Market Overview poller: " + err.message);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö).
 */
function startPoller(intervalMs) {
  if (pollerInterval) clearInterval(pollerInterval);
  pollerInterval = setInterval(pollMarketOverview, intervalMs);
  logger.info(`Market Overview poller started with interval ${intervalMs} ms.`);
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–ª–µ—Ä.
 */
function stopPoller() {
  if (pollerInterval) {
    clearInterval(pollerInterval);
    pollerInterval = null;
    logger.info("Market Overview poller stopped.");
  }
}

module.exports = {
  setMarketOverviewActive,
  setNotificationCallback,
  startPoller,
  stopPoller
};
