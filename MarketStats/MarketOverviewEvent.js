const logger = require('../logs/apiLogger');
const fs = require('fs');
const path = require('path');

const API_KEY = process.env.COINMARKETCAP_API_KEY;
const CHARTS_DIR = path.join(__dirname, '../charts');

if (!fs.existsSync(CHARTS_DIR)) fs.mkdirSync(CHARTS_DIR);

// ====================
// API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è 3 —Å–æ–±—ã—Ç–∏–π
// ====================
const eventEndpoints = {
  bitcoin_dominance: "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest",
  cmc_fear_greed: "https://pro-api.coinmarketcap.com/v3/fear-and-greed/latest",
  cmc100_index: "https://pro-api.coinmarketcap.com/v3/index/cmc100-latest"
};

// ====================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ API (–ò—Å–ø–æ–ª—å–∑—É–µ–º import –≤–º–µ—Å—Ç–æ require)
// ====================
async function fetchData(url) {
  try {
    const fetch = (await import('node-fetch')).default;
    const response = await fetch(url, {
      headers: { "X-CMC_PRO_API_KEY": API_KEY }
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    return await response.json();
  } catch (err) {
    logger.error(`‚ùå Failed to fetch data: ${err.message}`);
    return null;
  }
}

// ====================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
// ====================
async function getMarketOverviewData(activeEvents) {
  const eventData = [];

  for (const event of activeEvents) {
    if (!eventEndpoints[event]) continue;

    const data = await fetchData(eventEndpoints[event]);
    if (!data) continue;

    const imagePath = path.join(CHARTS_DIR, `${event}.png`);
    await generateChart(event, data, imagePath);

    eventData.push({
      key: event,
      text: formatEventText(event, data),
      image: imagePath
    });
  }

  return eventData;
}

// ====================
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// ====================
function formatEventText(event, data) {
  switch (event) {
    case "bitcoin_dominance":
      return `üìä *Bitcoin Dominance*\nBTC: ${data.data.btc}% | ETH: ${data.data.eth}% | Others: ${data.data.others}%`;

    case "cmc_fear_greed":
      return `üò® *CMC Fear & Greed Index*\nCurrent Value: *${data.data.value}* - ${data.data.sentiment}`;

    case "cmc100_index":
      return `üìà *CMC 100 Index*\nValue: *${data.data.index_value}*`;

    default:
      return `üìä *${event}*\nData: ${JSON.stringify(data)}`;
  }
}

// ====================
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
// ====================
async function generateChart(event, data, outputPath) {
  fs.writeFileSync(outputPath, `Fake Image Data for ${event}`);
}

module.exports = { getMarketOverviewData };
