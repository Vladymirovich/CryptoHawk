const { Telegraf } = require('telegraf');
require('dotenv').config({ path: '../config/.env' });
const logger = require('../logs/apiLogger');
const { startPoller, stopPoller } = require('../MarketStats/poller');

const bot = new Telegraf(process.env.TELEGRAM_MARKET_BOT_TOKEN);

// ====================
// üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
// ====================
async function getActiveMarketStatsEvents() {
  try {
    const adminBot = require('../bots/adminBot'); // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (adminBot && typeof adminBot.getActiveMarketStatsEvents === 'function') {
      const activeEvents = adminBot.getActiveMarketStatsEvents();
      return Array.isArray(activeEvents) ? activeEvents : [];
    } else {
      logger.error("‚ùå –û—à–∏–±–∫–∞: getActiveMarketStatsEvents –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ adminBot.");
      return [];
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${error.message}`);
    return [];
  }
}

// ====================
// üîÑ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
// ====================
async function updateActiveEvents() {
  try {
    const activeEvents = await getActiveMarketStatsEvents();

    if (!Array.isArray(activeEvents) || activeEvents.length === 0) {
      stopPoller();
      logger.info("üõë Poller –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π).");
    } else {
      startPoller(100000, activeEvents);
      logger.info(`‚úÖ Poller –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏–π: ${activeEvents.join(', ')}`);
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${error.message}`);
  }
}

// ====================
// üöÄ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ MarketStats Bot
// ====================
async function launchMarketStatsBot() {
  try {
    await bot.launch();
    logger.info("‚úÖ MarketStats Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.");
    await updateActiveEvents(); // üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  } catch (error) {
    if (error.response && error.response.error_code === 409) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: 409 Conflict. –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!");
    } else {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MarketStats Bot: ${error.message}`);
    }
  }
}

// ====================
// üõ† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
// ====================
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  logger.warn('‚ö†Ô∏è MarketStats Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT).');
});

process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  logger.warn('‚ö†Ô∏è MarketStats Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM).');
});

// ====================
// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
// ====================
module.exports = {
  bot,
  launch: launchMarketStatsBot,
  updateActiveEvents
};
