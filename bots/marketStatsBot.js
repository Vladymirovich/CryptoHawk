const { Telegraf } = require('telegraf');
require('dotenv').config({ path: '../config/.env' });
const logger = require('../logs/apiLogger');
const { startPoller, stopPoller } = require('../MarketStats/poller');

const bot = new Telegraf(process.env.TELEGRAM_MARKET_BOT_TOKEN);

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ Admin Bot
function getActiveMarketStatsEvents() {
  try {
    const adminBot = require('../bots/adminBot');
    if (adminBot && typeof adminBot.getActiveMarketStatsEvents === 'function') {
      return adminBot.getActiveMarketStatsEvents();
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${error.message}`);
  }
  return [];
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
function updateActiveEvents() {
  try {
    const activeEvents = getActiveMarketStatsEvents();
    
    if (!activeEvents || activeEvents.length === 0) {
      stopPoller();
      logger.info("üõë Poller –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π).");
    } else {
      startPoller(100000, activeEvents);
      logger.info(`‚úÖ Poller –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏–π: ${activeEvents.join(', ')}`);
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${error.message}`);
  }
}

// üöÄ –ó–∞–ø—É—Å–∫ MarketStats Bot
bot.launch()
  .then(() => {
    logger.info("‚úÖ MarketStats Bot –∑–∞–ø—É—â–µ–Ω.");
    updateActiveEvents();
  })
  .catch((error) => logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MarketStats Bot: ${error.message}`));

module.exports = { updateActiveEvents };
