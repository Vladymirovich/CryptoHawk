// ====================
// bots/adminBot.js
// ====================

require('dotenv').config({ path: __dirname + '/../config/.env' });
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const os = require('os');
const http = require('http');
const si = require('systeminformation'); // npm install systeminformation
const logger = require('../logs/apiLogger');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
if (!process.env.TELEGRAM_BOSS_BOT_TOKEN) {
  console.error("Error: TELEGRAM_BOSS_BOT_TOKEN is not defined in .env");
  process.exit(1);
}

// ====================
// –ó–∞–≥—Ä—É–∑–∫–∞ white-list –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
// ====================
const adminFile = path.join(__dirname, '../config/admins.json');
let adminList = [];
try {
  const raw = fs.readFileSync(adminFile, 'utf8');
  adminList = JSON.parse(raw).admins || [];
} catch (err) {
  logger.error(`Error reading admins.json: ${err.message}`);
}

// ====================
// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
// ====================
const bot = new Telegraf(process.env.TELEGRAM_BOSS_BOT_TOKEN);

// ====================
// White-list middleware
// ====================
bot.use((ctx, next) => {
  const userId = ctx.from?.id;
  if (!adminList.includes(userId)) {
    return ctx.reply('You are not on the admin white-list. Request access from an existing admin.');
  }
  return next();
});

// ====================
// IN-MEMORY –ù–ê–°–¢–†–û–ô–ö–ò
// ====================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è CEX Screen (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
const cexSettings = {
  flowAlerts: { active: false },
  cexTracking: { active: false },
  allSpot: { active: false },
  allDerivatives: { active: false },
  allSpotPercent: { active: false },
  allDerivativesPercent: { active: false }
};

// ====================
// –ú–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —è—Ä–ª—ã–∫–æ–≤ –≤ –º–µ–Ω—é
// ====================
const cexCategoryMapping = {
  "Flow Alerts": "flowAlerts",
  "CEX Tracking": "cexTracking",
  "All Spot": "allSpot",
  "All Derivatives": "allDerivatives",
  "All Spot%": "allSpotPercent",
  "All Derivatives%": "allDerivativesPercent"
};

// ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ gauge (–Ω–∞ –æ—Å–Ω–æ–≤–µ doughnut)
// ====================
function generateGaugeConfig(value, title) {
  return {
    type: 'doughnut',
    data: {
      datasets: [{
        // –ó–Ω–∞—á–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –¥–æ 100
        data: [value, 100 - value],
        backgroundColor: ['#36A2EB', '#555555'], // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –∏ –∑–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        borderColor: ['#000000', '#000000'],
        borderWidth: 1 // —Ç–æ–Ω–∫–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
      }]
    },
    options: {
      rotation: Math.PI,       // –ù–∞—á–∞–ª–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ ‚Äì —Å–ª–µ–≤–∞
      circumference: Math.PI,    // –ü–æ–ª—É–∫—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫
      cutoutPercentage: 50,      // –£–≤–µ–ª–∏—á–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ä–µ–∑–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª—å—Ü–æ —Ç–æ–Ω—å—à–µ
      plugins: {
        // –ü–ª–∞–≥–∏–Ω –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ doughnut (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º –∏ –∑–Ω–∞–∫–æ–º '%')
        doughnutlabel: {
          labels: [
            {
              text: `${value}%`,
              font: { size: 24, weight: 'bold' },
              color: '#ffffff'
            }
          ]
        }
      },
      responsive: false,
      maintainAspectRatio: false,
      backgroundColor: '#333333' // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    }
  };
}

// ====================
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ chat_id
// ====================
const statusMediaMessages = {};

// ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
// ====================
async function getServerMetrics() {
  // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
  const port = process.env.PORT || 3000;
  const url = `http://localhost:${port}/`;
  const start = Date.now();
  const responseTime = await new Promise((resolve, reject) => {
    http.get(url, (res) => {
      res.on('data', () => {}); // –ø–æ—Ç—Ä–µ–±–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      res.on('end', () => resolve(Date.now() - start));
    }).on('error', (err) => reject(err));
  });

  // –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ systeminformation
  const memData = await si.mem();
  const cpuLoad = await si.currentLoad();
  const fsData = await si.fsSize();
  const netStats = await si.networkStats(); // –ú–µ—Ç—Ä–∏–∫–∞ throughput –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
  const usersData = await si.users();
  const procData = await si.processes();
  const processCount = procData.all;

  const totalMem = (memData.total / (1024 * 1024)).toFixed(2);
  const freeMem = (memData.available / (1024 * 1024)).toFixed(2);
  const usedMem = ((memData.total - memData.available) / (1024 * 1024)).toFixed(2);
  const usedMemPercentage = (((memData.total - memData.available) / memData.total) * 100).toFixed(0);
  const cpuLoadPercent = cpuLoad.currentLoad.toFixed(2);
  const uptime = os.uptime();
  const uptimeStr = `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m`;

  let throughput = "0 KB/s";
  if (netStats && netStats.length > 0) {
    const totalBytesPerSec = netStats[0].rx_sec + netStats[0].tx_sec;
    throughput = (totalBytesPerSec / 1024).toFixed(2) + " KB/s";
  }

  // Disk Usage ‚Äì –∏—â–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ç–æ—á–∫–æ–π –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "/" (–∏–ª–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª)
  let diskUsagePercent = "0";
  let diskUsageStr = "N/A";
  if (fsData && fsData.length > 0) {
    const rootFs = fsData.find(fs => fs.mount === '/') || fsData[0];
    diskUsagePercent = rootFs.use.toFixed(0);
    const usedGB = (rootFs.used / (1024 * 1024 * 1024)).toFixed(2);
    const sizeGB = (rootFs.size / (1024 * 1024 * 1024)).toFixed(2);
    diskUsageStr = `${usedGB} / ${sizeGB} GB (${diskUsagePercent}%)`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ QuickChart.io (–∏—Å–ø–æ–ª—å–∑—É—è endpoint https://quickchart.io/chart)
  const memConfig = generateGaugeConfig(Number(usedMemPercentage), 'Memory Usage (%)');
  const cpuConfig = generateGaugeConfig(Number(cpuLoadPercent), 'CPU Load (%)');
  const diskConfig = generateGaugeConfig(Number(diskUsagePercent), 'Disk Usage (%)');

  const memGaugeUrl = `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(memConfig))}&w=250&h=150`;
  const cpuGaugeUrl = `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(cpuConfig))}&w=250&h=150`;
  const diskGaugeUrl = `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(diskConfig))}&w=250&h=150`;

  return {
    responseTime,
    totalMem,
    usedMem,
    freeMem,
    usedMemPercentage,
    cpuLoadPercent,
    uptime: uptimeStr,
    throughput,
    activeUsers: usersData.length,
    processCount,
    diskUsageStr,
    memGaugeUrl,
    cpuGaugeUrl,
    diskGaugeUrl  // –ü–æ–ª–µ –¥–ª—è Network Throughput –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì –º–µ—Ç—Ä–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
  };
}

// ====================
// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
// ====================
async function getDetailedServerStatus() {
  try {
    const metrics = await getServerMetrics();
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ Response Time > 1000 ms ‚Äì WARNING)
    const systemStatus = metrics.responseTime > 1000 ? "WARNING" : "OK";
    const reportText = `üñ• **SystemStatus: ${systemStatus}**
‚Ä¢ **Response Time:** ${metrics.responseTime} ms
‚Ä¢ **Throughput:** ${metrics.throughput}
‚Ä¢ **Active Users:** ${metrics.activeUsers}
‚Ä¢ **Processes:** ${metrics.processCount}
‚Ä¢ **Memory:** Total: ${metrics.totalMem} MB, 
   Used: ${metrics.usedMem} MB, 
   Free: ${metrics.freeMem} MB (${metrics.usedMemPercentage}%)
‚Ä¢ **CPU Load:** ${metrics.cpuLoadPercent}%
‚Ä¢ **Disk Usage:** ${metrics.diskUsageStr}
‚Ä¢ **Uptime:** ${metrics.uptime}

#CryptoHawk`;
    return { text: reportText, images: { memGaugeUrl: metrics.memGaugeUrl, cpuGaugeUrl: metrics.cpuGaugeUrl, diskGaugeUrl: metrics.diskGaugeUrl } };
  } catch (err) {
    return { text: `Error retrieving server metrics: ${err.message}`, images: {} };
  }
}


// ====================
// –•–µ–ª–ø–µ—Ä: –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∫–∞–∫ Buffer —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
// ====================
async function fetchImage(url) {
  try {
    const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Failed to fetch image from ${url}: ${res.status}`);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º arrayBuffer() –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ buffer()
    const arrayBuffer = await res.arrayBuffer();
    return Buffer.from(arrayBuffer);
  } catch (err) {
    console.error("Image fetch error:", err.message);
    throw err;
  }
}

// ====================
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
// ====================
function showMainMenu(ctx) {
  const text = "Welcome to CryptoHawk Admin Bot!\nSelect an option:";
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback("MarketStats", "menu_marketstats"), Markup.button.callback("OnChain", "menu_onchain")],
    [Markup.button.callback("CEX Screen", "menu_cex_screen"), Markup.button.callback("DEX Screen", "menu_dex_screen")],
    [Markup.button.callback("News", "menu_news"), Markup.button.callback("Trends", "menu_trends")],
    [Markup.button.callback("Activate Bots", "menu_activate_bots"), Markup.button.callback("Status", "menu_status")]
  ]);
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∫–∞–∫ callback_query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (ctx.updateType === 'callback_query' && ctx.update.callback_query.message) {
    return ctx.editMessageText(text, { reply_markup: keyboard.reply_markup });
  } else {
    return ctx.reply(text, { reply_markup: keyboard.reply_markup });
  }
}

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ /start
// ====================
bot.start((ctx) => {
  const text = "Welcome to CryptoHawk Admin Bot!\nSelect an option:";
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback("MarketStats", "menu_marketstats"), Markup.button.callback("OnChain", "menu_onchain")],
    [Markup.button.callback("CEX Screen", "menu_cex_screen"), Markup.button.callback("DEX Screen", "menu_dex_screen")],
    [Markup.button.callback("News", "menu_news"), Markup.button.callback("Trends", "menu_trends")],
    [Markup.button.callback("Activate Bots", "menu_activate_bots"), Markup.button.callback("Status", "menu_status")]
  ]);
  ctx.reply(text, { reply_markup: keyboard.reply_markup });
});

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "Status"
// ====================
bot.action('menu_status', async (ctx) => {
  await ctx.answerCbQuery();
  try {
    const { text, images } = await getDetailedServerStatus();
    let mediaGroup = [];
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Memory, CPU –∏ Disk (–¥–ª—è Network –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞)
      const memBuffer = await fetchImage(images.memGaugeUrl);
      const cpuBuffer = await fetchImage(images.cpuGaugeUrl);
      const diskBuffer = await fetchImage(images.diskGaugeUrl);
      mediaGroup = [
        { type: 'photo', media: { source: memBuffer }, caption: 'Memory Usage' },
        { type: 'photo', media: { source: cpuBuffer }, caption: 'CPU Load' },
        { type: 'photo', media: { source: diskBuffer }, caption: 'Disk Usage' }
      ];
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      const sentMedia = await ctx.replyWithMediaGroup(mediaGroup);
      statusMediaMessages[ctx.chat.id] = sentMedia.map(msg => msg.message_id);
    } catch (imgErr) {
      console.error("Error fetching images, sending text only:", imgErr.message);
    }
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –∫–Ω–æ–ø–∫–æ–π "‚Üê Back"
    await ctx.reply(text, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback("‚Üê Back", "back_from_status")]
      ]).reply_markup
    });
  } catch (err) {
    await ctx.reply(`Error retrieving server status: ${err.message}`);
  }
});

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "‚Üê Back"
// ====================
bot.action('back_from_status', async (ctx) => {
  await ctx.answerCbQuery();
  // –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  if (statusMediaMessages[ctx.chat.id]) {
    for (const msgId of statusMediaMessages[ctx.chat.id]) {
      try {
        await ctx.deleteMessage(msgId);
      } catch (delErr) {
        console.error("Error deleting media message:", delErr.message);
      }
    }
    delete statusMediaMessages[ctx.chat.id];
  }
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  showMainMenu(ctx);
});

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "Activate Bots" ‚Äì –ø–æ–¥–º–µ–Ω—é
// ====================
bot.action('menu_activate_bots', (ctx) => {
  const text = "Activate Bots:\nSelect a bot to activate:";
  const keyboard = Markup.inlineKeyboard([
    [
      // –î–ª—è MarketStats –∏—Å–ø–æ–ª—å–∑—É–µ–º URL‚Äë–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
      Markup.button.url("MarketStats", "https://t.me/CryptoHawk_market_bot?start=START"),
      Markup.button.url("OnChain", "https://t.me/CryptoHawkOnChainBot?start=START")
    ],
    [
      Markup.button.url("CEX Screen", "https://t.me/CryptoHawk_cex_bot?start=START"),
      Markup.button.url("DEX Screen", "https://t.me/CryptoHawkDEXBot?start=START")
    ],
    [
      Markup.button.url("News", "https://t.me/CryptoHawkNewsBot?start=START"),
      Markup.button.url("Trends", "https://t.me/CryptoHawkTrendsBot?start=START")
    ],
    [
      Markup.button.callback("‚Üê Back", "back_from_activate")
    ]
  ]);
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é
  return ctx.editMessageText(text, { reply_markup: keyboard.reply_markup });
});

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "‚Üê Back" –¥–ª—è –ø–æ–¥–º–µ–Ω—é "Activate Bots"
// ====================
bot.action('back_from_activate', (ctx) => {
  ctx.answerCbQuery();
  showMainMenu(ctx);
});

// ====================
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MarketStats
// ====================
const marketStatsSettings = {
  open_interest: { active: false },
  top_oi: { active: false },
  top_funding: { active: false },
  crypto_etfs_net_flow: { active: false },
  crypto_market_cap: { active: false },
  cmc_fear_greed: { active: false },
  cmc_altcoin_season: { active: false },
  cmc100_index: { active: false },
  eth_gas: { active: false },
  bitcoin_dominance: { active: false },
  market_overview: { active: false }
};

// ====================
// –ú–∞–ø–ø–∏–Ω–≥ —è—Ä–ª—ã–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
// ====================
const marketStatsCategoryMapping = {
  "Open Interest": "open_interest",
  "Top OI": "top_oi",
  "Top Funding": "top_funding",
  "Crypto ETFs Net Flow": "crypto_etfs_net_flow",
  "Crypto Market Cap": "crypto_market_cap",
  "CMC Fear & Greed": "cmc_fear_greed",
  "CMC Altcoin Season": "cmc_altcoin_season",
  "CMC 100 Index": "cmc100_index",
  "ETH Gas": "eth_gas",
  "Bitcoin Dominance": "bitcoin_dominance",
  "Market Overview": "market_overview"
};

// ====================
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç MarketStats Bot (–±–µ–∑ –æ—à–∏–±–æ–∫)
// ====================
let marketStatsBot;
try {
  marketStatsBot = require('../bots/marketStatsBot');
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MarketStats Bot:", error.message);
  marketStatsBot = null;
}

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–ú–ï–ù–Æ "MarketStats"
// ====================
bot.action('menu_marketstats', (ctx) => {
  ctx.answerCbQuery();
  showMarketStatsMenu(ctx);
});

// ====================
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é MarketStats
// ====================
function showMarketStatsMenu(ctx) {
  const text = "MarketStats Settings:\nToggle market events:";
  const keyboard = Markup.inlineKeyboard(
    Object.keys(marketStatsCategoryMapping).map((label) => {
      const key = marketStatsCategoryMapping[label];
      return [Markup.button.callback(getMarketToggleLabel(label), `toggle_${key}`)];
    })
  );

  try {
    ctx.editMessageText(text, { reply_markup: keyboard.reply_markup });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é MarketStats:", error.message);
  }
}

// ====================
// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (‚úÖ / ‚ùå)
// ====================
function getMarketToggleLabel(label) {
  const key = marketStatsCategoryMapping[label];
  if (!key || !marketStatsSettings[key]) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ö–ª—é—á '${label}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ marketStatsSettings!`);
    return `‚ùå ${label}`;
  }
  return marketStatsSettings[key].active ? `‚úÖ ${label}` : `‚ùå ${label}`;
}

// ====================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
// ====================
function getActiveMarketStatsEvents() {
  return Object.keys(marketStatsSettings).filter((key) => marketStatsSettings[key]?.active);
}

// ====================
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ MarketStats Bot
// ====================
function updateMarketStatsBot() {
  if (!marketStatsBot || !marketStatsBot.updateActiveEvents) {
    console.error("‚ùå –û—à–∏–±–∫–∞: MarketStats Bot –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ updateActiveEvents –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
    return;
  }
  const activeEvents = getActiveMarketStatsEvents();
  marketStatsBot.updateActiveEvents(activeEvents);
}

// ====================
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π + –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–µ—Ä–∞
// ====================
function toggleMarketEvent(ctx, key) {
  if (!marketStatsSettings[key]) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ö–ª—é—á '${key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ marketStatsSettings!`);
    ctx.answerCbQuery(`‚ö† –û—à–∏–±–∫–∞: ${key.replace(/_/g, " ")} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
    return;
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  marketStatsSettings[key].active = !marketStatsSettings[key].active;

  ctx.answerCbQuery(`${key.replace(/_/g, " ")} —Ç–µ–ø–µ—Ä—å ${marketStatsSettings[key].active ? '–í–∫–ª—é—á–µ–Ω ‚úÖ' : '–í—ã–∫–ª—é—á–µ–Ω ‚ùå'}`);

  // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º MarketStats Bot
  updateMarketStatsBot();

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ ‚úÖ/‚ùå —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
  showMarketStatsMenu(ctx);
}

// ====================
// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
// ====================
Object.keys(marketStatsCategoryMapping).forEach((label) => {
  const key = marketStatsCategoryMapping[label];
  bot.action(`toggle_${key}`, (ctx) => toggleMarketEvent(ctx, key));
});

// ====================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Back" –≤ MarketStats
// ====================
bot.action('back_from_marketstats', (ctx) => {
  ctx.answerCbQuery();
  showMainMenu(ctx);
});

// ====================
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è MarketStats Bot
// ====================
module.exports = {
  getActiveMarketStatsEvents: () => Object.keys(marketStatsSettings).filter((key) => marketStatsSettings[key]?.active)
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => ctx.reply('üöÄ CryptoHawk Admin Bot –∑–∞–ø—É—â–µ–Ω!'));

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function launchBot() {
  try {
    await bot.launch();
    await bot.telegram.setWebhook(''); // –û—Ç–∫–ª—é—á–∞–µ–º Webhook –¥–ª—è long polling
    logger.info('‚úÖ CryptoHawk Admin Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.');
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Admin Bot: ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (SIGINT, SIGTERM)
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  logger.warn('‚ö†Ô∏è Admin Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT).');
});

process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  logger.warn('‚ö†Ô∏è Admin Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM).');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞
module.exports = {
  bot,
  launch: launchBot
};
